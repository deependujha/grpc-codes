// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: deep.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeepSrv_AddTwoNum_FullMethodName      = "/deep.DeepSrv/AddTwoNum"
	DeepSrv_AddAllTheseNum_FullMethodName = "/deep.DeepSrv/AddAllTheseNum"
)

// DeepSrvClient is the client API for DeepSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeepSrvClient interface {
	AddTwoNum(ctx context.Context, in *NumReq, opts ...grpc.CallOption) (*NumResp, error)
	AddAllTheseNum(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Num, NumResp], error)
}

type deepSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewDeepSrvClient(cc grpc.ClientConnInterface) DeepSrvClient {
	return &deepSrvClient{cc}
}

func (c *deepSrvClient) AddTwoNum(ctx context.Context, in *NumReq, opts ...grpc.CallOption) (*NumResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NumResp)
	err := c.cc.Invoke(ctx, DeepSrv_AddTwoNum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deepSrvClient) AddAllTheseNum(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Num, NumResp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DeepSrv_ServiceDesc.Streams[0], DeepSrv_AddAllTheseNum_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Num, NumResp]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeepSrv_AddAllTheseNumClient = grpc.ClientStreamingClient[Num, NumResp]

// DeepSrvServer is the server API for DeepSrv service.
// All implementations must embed UnimplementedDeepSrvServer
// for forward compatibility.
type DeepSrvServer interface {
	AddTwoNum(context.Context, *NumReq) (*NumResp, error)
	AddAllTheseNum(grpc.ClientStreamingServer[Num, NumResp]) error
	mustEmbedUnimplementedDeepSrvServer()
}

// UnimplementedDeepSrvServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeepSrvServer struct{}

func (UnimplementedDeepSrvServer) AddTwoNum(context.Context, *NumReq) (*NumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTwoNum not implemented")
}
func (UnimplementedDeepSrvServer) AddAllTheseNum(grpc.ClientStreamingServer[Num, NumResp]) error {
	return status.Errorf(codes.Unimplemented, "method AddAllTheseNum not implemented")
}
func (UnimplementedDeepSrvServer) mustEmbedUnimplementedDeepSrvServer() {}
func (UnimplementedDeepSrvServer) testEmbeddedByValue()                 {}

// UnsafeDeepSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeepSrvServer will
// result in compilation errors.
type UnsafeDeepSrvServer interface {
	mustEmbedUnimplementedDeepSrvServer()
}

func RegisterDeepSrvServer(s grpc.ServiceRegistrar, srv DeepSrvServer) {
	// If the following call pancis, it indicates UnimplementedDeepSrvServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeepSrv_ServiceDesc, srv)
}

func _DeepSrv_AddTwoNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeepSrvServer).AddTwoNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeepSrv_AddTwoNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeepSrvServer).AddTwoNum(ctx, req.(*NumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeepSrv_AddAllTheseNum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeepSrvServer).AddAllTheseNum(&grpc.GenericServerStream[Num, NumResp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeepSrv_AddAllTheseNumServer = grpc.ClientStreamingServer[Num, NumResp]

// DeepSrv_ServiceDesc is the grpc.ServiceDesc for DeepSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeepSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deep.DeepSrv",
	HandlerType: (*DeepSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTwoNum",
			Handler:    _DeepSrv_AddTwoNum_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddAllTheseNum",
			Handler:       _DeepSrv_AddAllTheseNum_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "deep.proto",
}
